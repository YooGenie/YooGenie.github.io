# REST API

* API를 만드는 규칙 중 하나
* 웹 API에서 사용되는 규칙을 RestAPI로 정의 한다.
* 자원을 다양한 형식으로 표현할 수 있고, 상태를 전송한다.

# 왜 이 규칙을 사용할까?

1. 단순하고 명확하다
ex) GET /donation/1 => 기부번호 1번인것을 조회한다.
예전에는 SOAP를 사용하여 복잡했다. 규칙이 많았다. 그래서 코드 길이가 길다. 하지만 REST를 사용하면서 단순해지고 코드도 짧아졌다.

# Representational(표현) : 자원을 표현한다

예를 들어서

```
Request : GET /greeting
Response: 안녕하세요
```

`/greeting` 자원
`안녕하세요` 자원이 표현된 것

자원은 다양한 방식으로 표현할 수 있다.
greeting -> hello,안녕하세요, `<html><body>안녕하세요</body></html>`

* header로 자원의 표현 방식을 요청한다.

* Content-type: 해당 헤더를 사용하는 주체의 표현 방법
* Accept: 요청할때,응답으로받고싶은표현방법
* 예시

```
Content-type: application/json => 바디를 json형식으로 한다.
Accept: application/json => json 형식이라고 쓴다 => 서버가 응답할 때 json값으로 한다는 것이다.
```

# state (상태)

### state Transfer : 상태가 변한다는 것

* 리스트에서 1번을 클릭하면 1번에 대한 조회화면으로 바뀐다. => REST API에서 내려주는 응답을 통해 상태 변경한다.
*

# transfer(전송)

# REST API 작성 규칙

## GET 경우

* 바디가 없으니까 Content-Type 없다
* Content-Type: application/json => 응답값을 json으로 받을 것이다.

### request

GET /donation
Accept: application/json 헤더

### response

200 OK
Content-Type: application/json
{
"result": [
...
]
}

## POST/PUT

* 응답값은 없다(boby x)
* Accept 없다

### request

post /donation
Content-Type: application/json
{
"name ": "유지니"
"address": "서울특별시 영등포구"
}

### response

201 Created

* 생성에 맞는 status 값을 내려줘야한다

# 1) 행위를 HTTP 메소드로 사용한다

* URL의 행동 표현 안된다
* GET /Show-donation (x)
* GET donation/update/1 (x)
* 조회: GET 등록: POST 수정: PUT, PATCH 삭제: delete
* 실제로 사용하다 보면 모든 경우에 적용되지 않는다.
    * 예를 들어서 로그인 POST /login => URL를 유동적으로 표현한다.
* GET 사용할 때 쿼리스트링으로 사용하기엔 길이가 제한적이라서 POST를 사용한다.
* GET은 Body를 사용할 수 없다.
* PUT과 PATCH 차이점
* PUT: 전체 수정
* PATCH: 일부 수정
예시

```
{
  "DonationId": 19,
  "Deductor": "홍길동",
  "IsDefault": true,
  "ResidentRegistrationNumber": "8204251364369"
}
```

PUT 경우는

```
{
  "DonationId": 19,
  "Deductor": "유지니",
  "IsDefault": true,
  "ResidentRegistrationNumber": "8204251364369"
}
```

* 값을 안적으면 기본값으로 수정된다
* DonationId 안적으면 0으로 변경된다

PATCH 경우는

```
  "Deductor": "유지니"
```

* 나머지를 안적어도 Deductor만 변경 된다

# 2)리소스는 복수형으로 사용한다.

/donations
GET /blog X GET /blogs O

# 3) URL은 케밥 케이스 사용한다

/donation-receipts
GET /giftCards X GET /gift\_cards X GET /gift-cards O

# 4) 리소스는 소문자로 사용한다

/donation
GET /Blogs X GET /BLOGS X GET /blogs O

# 5) URL에 파일 확장자를 포함하지 않는다.

GET /users/1/profile.jpg X GET /users/1/profile 0 Accept: image/jpg

# 6)응답할 때 결과를 HTTP status로 표현한다.

### 1xx

* 요청을 받았으며 프로세스를 계속함
* 잘 사용하지 않는다

### 2XX : 성공

| 번호 | 상태 |  | 비고 |
| --- | --- | --- | --- |
| 200 | OK | 요청 정상 처리 |  |
| 201 | Created | 어떠한 생성 작업을 요청 받았으며, 생성 작업을 성공 |  |
| 202 | Accepted | 요청을 받아들여졌으나, 아직 동작을 수행하지 않은 상태로 요청이 적절함 | 비동기처리할 때 |
| 203 | NonAuthoritativeInfo | 요청 성공했지만 검증이 되지 않은 상태 |  |
| 204 | NoContent | 요청 성공했지만 제공할 내용이 없음 | 바디 정보 없을 때 |
| 207 | Multi-Status | 여러개의 상태코드를 가지고 있을 때 | 일부 성공, 일부 실패일 때 사용 |

* 202 예시 : 어떤 요청을 처리 할 때10분이 걸리면 response를 10분 있다가 받는게 아니라 바로 일단 요청을 수락했다. 이런 의미이다.

### 3XX: 리디렉션

* 잘사용하지는 않능다.
| 번호 | 상태 |  | 비고 |
| --- | --- | --- | --- |
\| 302 \| Found \| 요청받은 행동 수행을 위해서는 다른 URL로 요청 해야함 \|

### 4XX: 요청실패(클라이언트)

| 번호 | 상태 |  | 비고 |
| --- | --- | --- | --- |
| 400 | BadRequest | 클라이언트가 올바르지 않은 요청을 보냄 |  |
| 401 | Unauthorized | 권한 인증 요구 | 어떤사용자인지 모를때 |
| 403 | Forbidden | 요청이 서버에 의해 거부됨 | 어떤사용자인지 알지만 접근할 수 없는 API 호출했을 때 |
| 404 | NotFound | 요청한 URL을 찾을 수 없음 |  |
| 405 | MethodNotAllowed | 요청한 URL이 Method 지원 안함 | post인데 put으로 사용할때 |
| 409 | Conflict | 클라이언트 요청에 대해 서버에서 충동 발생 |  |
| 410 | Gone | 요청한 URL이 더 이상 사용되지 않고 사라짐<br>ex) 택배 발송되어 주문취소가 안되는데 버튼은 살아있는때 누르면 에러 코드 뜸 |  |
| 415 | UnsupportedMediaType | 서버가 이해 하지 못하는 유형의 컨텐츠를 요청 하였다 |  |
| 429 | Too Many Requests | 클라이언트가 한정된 시간에 많은 요청을 보냄 | 사용자요청을 받지 않고 막아준다. |

* 429 예시 사진 용량이 너무 클 때 발생한 적이 있다.

### 5XX: 응답실패(서버)

| 번호 | 상태 |  | 비고 |
| --- | --- | --- | --- |
| 500 | InternalServerError | 서버에서 오류가 발생하여 응답 할 수 없음 | DB통신오류, 서버내부에서 오류 |
| 503 | Service Unavailable | 일시적인 중단상태로 일시적으로 사용이 안될 때 사용 |  |

# API 만들기

ID가 1인 기부를 조회한다 => GET /donations/1
모든 기부를 조회한다 => GET /donations
기부를 등록한다 => POST /donations
ID가 1인 기부건에 기부영수증을 신청한다 POST /donations/1/receipts

# RESTful API

REST라는 규칙을 대체로 지켜서 만드는 API
(완벽하게 규칙을 지켜서 만들 수 없기 때문이다.)
