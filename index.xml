<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>괴발개발 성장기🐾</title>
    <link>https://YooGenie.github.io/</link>
    <description>Recent content on 괴발개발 성장기🐾</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Mon, 27 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://YooGenie.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1년차 개발자 회고</title>
      <link>https://YooGenie.github.io/post/2021-12-27/</link>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/2021-12-27/</guid>
      <description>벌써 입사한지 1년이 되었다. 일년을 뒤돌아보는 시간을 가졌다. (팀이 생긴지 1년 4개월, 프리랜서 개발자와 신입개발자로 돌아가는 팀이다)
# 입사하자마자 고비 처음 팀으로 왔을 때 사수는 우리에게 Clone을 하라고 했다. 나는 무슨 말인지 이해를 못 했고 git이 무엇인지 몰랐다. 옆에 앉은 동기는 git를 아는 것 같았다. 도움을 받을 수 있다는 생각에 다행이라는 생각했다. 우리 팀은 git, go, react를 사용한다고 했는데 나는 그날 세 단어를 처음 들어봤다. 진짜 나는 아무것도 몰랐는데 어떻게 취업이 되었는지 미스터리다.</description>
    </item>
    
    <item>
      <title>Golang JSON에서 원하는 값만 추출해 오기</title>
      <link>https://YooGenie.github.io/post/test/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/test/</guid>
      <description># 배경 DB에서 Json으로 되어 있는 컬럼에서 원하는 값 추출하고 싶었다.
# DB 컬럼 값 content {&amp;#34;name&amp;#34;: &amp;#34;유지니&amp;#34;, &amp;#34;id&amp;#34;: 3954, &amp;#34;totalQuantity&amp;#34;: 3, &amp;#34;registrationNo&amp;#34;: &amp;#34;990101-2******&amp;#34;} # 코드 type ContentJson struct { Id int64 Content map[string]interface{} } func (contentService) ExtractValue(ctx context.Context, id int64) error { content, err := DonationDocuService().GetIssuedDonationReceipt(ctx, id) //원하는 값을 가져왔다. if err != nil { return err } m := entity.ContentJson{ Id: id, } _ = json.Unmarshal(content.Content, &amp;amp;m.Content) //바이트를 JSon으로 바꿔준다.</description>
    </item>
    
    <item>
      <title>[golang] DB안에 JSON 객체를 넣는 방법(jsonb 사용)</title>
      <link>https://YooGenie.github.io/post/2021-06-22/</link>
      <pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/2021-06-22/</guid>
      <description># 배경 캠페인마다 약관을 넣어야 했다. 약관내용을 json 값으로 DB에 넣어야 한다고 했다. 시니어 개발자분의 힌트는 jsonb를 이용하라고 했다.
#방법 DB 컬럼하나에 JSON을 넣고 싶었다. 이럴 때에는 jsonb을 사용한다 xorm:&amp;ldquo;a jsonb&amp;rdquo; 이렇게 설정하면 된다
json 예시 &amp;#34;a&amp;#34;: { &amp;#34;aOne&amp;#34;: &amp;#34;a객체안에 하나&amp;#34;, &amp;#34;b&amp;#34;: { &amp;#34;bOne&amp;#34;: &amp;#34;a객체안에 b 객체안에 하나&amp;#34;, &amp;#34;bTwoArray&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;홍길동&amp;#34;, &amp;#34;content&amp;#34; : &amp;#34;객체안에 객체안에 배열&amp;#34; } ] }, &amp;#34;aThreeArray&amp;#34;: [ { &amp;#34;id&amp;#34;: 1, &amp;#34;content&amp;#34;: &amp;#34;객체안에 배열&amp;#34; }, { &amp;#34;id&amp;#34;:2, &amp;#34;content&amp;#34;: &amp;#34;객체안에 배열 2개&amp;#34; } ] } # DTO에서 구조체 type ACreate struct { A *A `json:&amp;#34;a&amp;#34; ` } type A struct { AOne string `json:&amp;#34;aOne&amp;#34; validate:&amp;#34;required&amp;#34; ` B B `json:&amp;#34;b&amp;#34; ` AThreeArray []AThreeArray `json:&amp;#34;aThreeArray&amp;#34;` } type B struct { BOne string `json:&amp;#34;bOne&amp;#34;` BTwoArray []BTwoArray `json:&amp;#34;bTwoArray&amp;#34;` } type BTwoArray struct { CompanyName string `json:&amp;#34;companyName&amp;#34;` Content string `json:&amp;#34;content&amp;#34;` } type AThreeArray struct { Id string `json:&amp;#34;id&amp;#34; ` Content string `json:&amp;#34;content&amp;#34;` } </description>
    </item>
    
    <item>
      <title>[golang] 구조체</title>
      <link>https://YooGenie.github.io/post/2021-06-14/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/2021-06-14/</guid>
      <description>내부 필드 접근 : 구조체에 다른 구조체를 내부 필드로 지정하면 내부 구조체의 필드에 접근 할 수 있다.
type Info struct { id int name string addressInfo Address } type Address struct { postNum string address string addressDetail string } 구조체 값을 출력할 때 필드명과 값을 함께 출력하려면 %#v 를 사용한다 fmt.Printf(&amp;#34;%#v&amp;#34;,V) 구조체 임베딩 Go에는 상속이 없다. 그래서 사용자 정의 타입을 조합하여 구조체로 정의하여 객체를 재사용한다. 사용자 정의 타입을 구조체의 필드로 지정하는 것을 임베딩이라고 한다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://YooGenie.github.io/archives/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://YooGenie.github.io/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/about/</guid>
      <description>Tech Stack (◕‿◕✿) Framework (◕‿◕✿) IDE (◕‿◕✿) 협업 툴 (◕‿◕✿) </description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://YooGenie.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/contact/</guid>
      <description>To contact us, please fill out the form below.</description>
    </item>
    
  </channel>
</rss>
