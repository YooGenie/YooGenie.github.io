<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>신입개발자 on 괴발개발 성장기🐾</title>
    <link>https://YooGenie.github.io/tags/%EC%8B%A0%EC%9E%85%EA%B0%9C%EB%B0%9C%EC%9E%90/</link>
    <description>Recent content in 신입개발자 on 괴발개발 성장기🐾</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Tue, 29 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://YooGenie.github.io/tags/%EC%8B%A0%EC%9E%85%EA%B0%9C%EB%B0%9C%EC%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>#9 Stash 임시저장하는 방법</title>
      <link>https://YooGenie.github.io/post/company/20201229/</link>
      <pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/company/20201229/</guid>
      <description>stash : 브랜치 전환을 하거나 커밋 변경을 해야할때 임시적으로 저장할 수 있는 명령어 &amp;lt; 마스터에서 모르고 작업한 경우 &amp;gt; 임시저장 임의 이름으로 저장하기 git stash 이름 지정해서 저장하기 방법 : git stash save [명칭] 예시 : git stash save masterbranch stash 기록 확인 git stash list 저장된 stash 불러오기 가장 최근에 저장된 stash를 불러온다 git stash apply 원하는 stash 불러오기 방법 : git stash apply [stash아이디] 예시 : git stash apply stash@{1} 그리고 나서 작업 시작하기 보충 stash 기록이 모두 제거 git stash clear stash를 복원하고 바로 제거 git stash pop 가장 최근에 저장한 stash를 삭제 git stash drop ​ ​ ​</description>
    </item>
    
    <item>
      <title>#8 GitLab Merge Request 생성하기</title>
      <link>https://YooGenie.github.io/post/company/20201228/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/company/20201228/</guid>
      <description>push 성공 주소 클릭 페이지 작성 Assignee는 XXX님으로 설정 Submit merge request 클릭 후 기다리면 됨 ​ ​ ​</description>
    </item>
    
    <item>
      <title>#7 rebase 하는 방법</title>
      <link>https://YooGenie.github.io/post/company/20201227/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/company/20201227/</guid>
      <description>rebase 하는 방법 코드 수정 commit 하고 commit 로그를 하나로 합치기 위해서 Rebase (2가지방법) push 전 commit 로그 두개를 rebase log를 통하여 commit이 두개인 것을 확인 git log commit을 하나로 합치는 작업 진행 git rebase -i HEAD~2 &amp;lt; vi 편집기 사용 &amp;gt; 2-1. [i] 또는 [insert]를 눌러서 편집 시작 2-2. 두개의 pick 중 1개는 pick으로 유지 하나는 s로 변경 2-3. [esc]키를 눌러서 빠져나오기 2-4. 창을 한번 클릭한 뒤 :wq작성하고 빠져나오기 commit 메세지 한개로 수정하기 [DD] 또는 [D + ↓]`를 사용하여 줄 삭제 하나의 메세지(체크된 박스)만 유지 log가 하나로 합쳐진 것을 확인 Pull하고 충돌난다면 push &amp;ndash;force 방법 : git push [별칭] -f [이슈번호] 예시 : git push sunny -f 9 push 후 GitLab에 commit이 두개 인 경우의 rebase log를 통하여 commit이 두개인 것을 확인 git log commit을 하나로 합치는 작업 진행 git rebase -i HEAD~2 &amp;lt; vi 편집기 사용&amp;gt; 2-1) [i] 또는 [insert]를 눌러서 편집 시작 2-2) 두개의 pick 중 1개는 pick으로 유지 하나는 s로 변경 2-3) [esc]키를 눌러서 빠져나오기 2-4) 창을 한번 클릭한 뒤 :wq작성하고 빠져나오기 commit 메세지 한개로 수정하기 [DD] 또는 [D + ↓]를 사용하여 줄 삭제 하나의 메세지(체크된 박스)만 유지 log가 하나로 합쳐진 것을 확인 Pull하고 충돌난다면 [Push 전 Pull한 이후 충돌나면?</description>
    </item>
    
    <item>
      <title>#6 conflict 해결 방법</title>
      <link>https://YooGenie.github.io/post/company/20201226/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/company/20201226/</guid>
      <description>conflict 나는 경우 push 하기전 commit 후 pull 받았을 때 conflict이 난 경우 Merge request한 후에 conflict이 난 경우 수정 중 다른 작성자가 같은 코드를 수정하고 올렸을 경우 다음과 같은 conflict이 발생합니다. 충동 해결 방법 conflict 발생시 다음과 같은 경로로 이동하여 conflict를 해결합니다. TIP : 여러개의 파일이 충돌이 날 수 있기 때문에 최상위 디렉토리에서 다음과 같은 경로로 이동합니다. 2)Merge를 클릭 Accept Yours 로컬에 있는 코드를 받아들이겠다는 뜻입니다. Conflict이 난 상황에서 본인이 수정한 코드를 먼저 받아 들여서 로컬 창에 본인이 수정한 코드만 남게 됩니다.</description>
    </item>
    
    <item>
      <title>#5 Pull과 push</title>
      <link>https://YooGenie.github.io/post/company/20201225/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/company/20201225/</guid>
      <description>#Pull 할 경우 브랜치 만들기 전 master에서 pull 수정 작업 Commit 한 후 Pull git pull upstream master #push 할 때 코드 변경사항(추가되거나 수정 혹은 삭제)을 commit 현재상태확인하기 git status commit 내역 추가 git add . 저장하기 방법 : git commit -m &amp;#34;#브랜치번호 이슈제목&amp;#34; 예시 : git commit -m &amp;#34;#9 코드리뷰 후 수정&amp;#34; pull 하기 git pull upstream master 만약 충돌이 난다면 Conflict 해결방법 참고
3)push 저장소 이름 / 이슈번호</description>
    </item>
    
    <item>
      <title>#4 branch 만드는 방법</title>
      <link>https://YooGenie.github.io/post/company/20201224/</link>
      <pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/company/20201224/</guid>
      <description># 이슈생성방법 1) 두레이 작성법 개발스프린트 글에서 유저스토리 맡은 부분을 클릭 → 왼쪽 상단 &amp;hellip; 클릭 → 하위업무추가 → 신규 담당자: 본인이름 제목: 누구나 제목만 보고 업무를 파악할 수 있게 적는다. 내용: # 작업목표 (체크박스 이용해서 쓰기) 2) GitLab에서 Issues 생성 업무해당되는 레파지토리 이동 → 왼쪽 바 Issues 클릭 → new issue 클릭 → 작성후 Submit issue → 브랜치가 생성 → 이주소를 두레이에 작성 new issue 작성법 - GitLab에서 Title: 두레이 제목과 똑같이 Description: 두레이 업무 URL 쓰기 Assignee: 본인선택 # Branch 생성 master에서 pull 받은 뒤에 진행 전체 브랜치 내역 확인 git branch 새로운 브랜치를 생성, 해당 브랜치로 이동 동시 수행 git checkout -b 브랜치이름(=이슈번호) 해당 브랜치로 이동 git checkout 브랜치이름 해당 브랜치가 삭제 git branch -d 브랜치이름 ​ ​ ​</description>
    </item>
    
    <item>
      <title>#3 공용 저장소를 개인 저장소로 옮기기</title>
      <link>https://YooGenie.github.io/post/company/20201223/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/company/20201223/</guid>
      <description>#gitLab 사진 # clone 하는 방법(2가지) 1. git bash에서 작성 작업 폴더로 이동하여 오른쪽 마우스를 클릭하여 &amp;lsquo;git bash here&amp;rsquo;로 들어간다 또 git bash 접속해서 cd를 통하여 디렉터리를 찾아서 접속한다. cd GitTest mkdir 폴더명 디렉터리 하나를 만든다. 공용 GitLab 저장소에서 clone 버튼 클릭해서 SSH주소를 복사한다. Clone git clone [SSH주소] 2. Goland에서 작업 open클릭-Users/bist/새폴더 하나 만들어서 선택-OK클릭 clone 명령어 쓰기 git clone [SSH주소] 폴더명 작성 후 폴더 안으로 이동하기 cd sample-git # 원격 저장소 설정(GoLand에 작업!</description>
    </item>
    
    <item>
      <title>#2 javaScript에서 패키지 관리자 툴 설치</title>
      <link>https://YooGenie.github.io/post/company/20201222/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/company/20201222/</guid>
      <description># javaScript에서 모듈을 설치 할 수 있는 패키지 관리자 툴 npm node packged Manager의 약자로 Node.js에서 주로 사용했던 패키지 관리자 툴 이 패키지는 온라인 데이터베이스로 이루어져 있습니다. yarn 페이스북에서 npm을 보완하고 속도를 빠르게 한 패키지 매니저 툴 시작하는 방법 node.js 다운받기 git bash에서 버전 체크 node -v git bash에서 yarn 설치(한번만 하면됨) npm install -g yarn GoLand에서 모듈을 그대로 설치 yarn install GoLand에서 yarn 버전체크 yarn -v 프로젝트 시작(local에서 웹 접속) yarn start ​ ​ ​</description>
    </item>
    
    <item>
      <title>#1 초기 로컬 개발 환경 구성</title>
      <link>https://YooGenie.github.io/post/company/20201221/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YooGenie.github.io/post/company/20201221/</guid>
      <description>1. Go 언어를 설치 2. GoLand설치 =&gt; 30일 무료 체험으로 설치하세요 3. MySQL + MySQL Workbench 설치
4. Git Bash 설치 5. 환경변수 설정하기 6. SHH 키 찾아서 git에 작성 SSH 키 찾아서 GitLab에 작성하는 방법 git bash 열어서 ssh 이동을 한다 cd ~/.ssh 폴더 안에 내용을 체크한다 ls 키를 알 수 있다 cat id\_rsa.pub 키를 복사해서 GitLab에서 오른쪽 상단 원 옆에 화살표를 눌러 settings 클릭한다. 왼쪽 바에 SSH keys을 클릭해서 key부분에 작성한다.</description>
    </item>
    
  </channel>
</rss>
